class Solution {
public:
    int left(vector<int>& nums,int target,int i)
{
    while(i >= 0 && nums[i] == target)
    {
        i--;
    }
    return i+1;
}
int right(vector<int>& nums,int target,int i)
{
    int n = nums.size();
    while(i < n && nums[i] == target)
    {
        i++;
    }
    return i-1;
}
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int i=0;
        int j=n-1;
        while(i<=j)
        {
            int m=(i+j)/2;
            if(nums[m]==target)
            {
                i=left(nums,target,m);
                j=right(nums,target,m);
                return {i,j};
            }
             else if(nums[m] < target)
            {
                i = m + 1;
            }
            else
            {
                j = m - 1;
            }

        }
        return {-1,-1};
    }
};
                        OR

class Solution {
public:
   int left(vector<int> &nums,int n,int target)
   {
    int i=0;
    int j=n-1;
    int left_most=-1;
    while(i<=j)
    {
        int m=(i+j)/2;
        if(nums[m]==target)
        {
            left_most=m;
            j=m-1;

        }
        else if(nums[m]<target)
        {
            i=m+1;
        }
        else{
            j=m-1;
        }
    }
    return left_most;
   }
   int right(vector<int> &nums,int n,int target)
   {
    int i=0;
    int j=n-1;
    int right_most=-1;
    while(i<=j)
    {
        int m=(i+j)/2;
        if(nums[m]==target)
        {
            right_most=m;
            i=m+1;

        }
        else if(nums[m]<target)
        {
            i=m+1;
        }
        else{
            j=m-1;
        }
    }
    return right_most;
   }
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int leftMost=left(nums,n,target);
        int rightMost=right(nums,n,target);
        return {leftMost,rightMost};
    }
};
